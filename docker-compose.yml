services:
  web:
    image: nginx:1.27-alpine
    container_name: chaco_web
    restart: unless-stopped
    # Run with hardening; nginx master runs as root inside container and drops
    # to 'nginx' user for workers per nginx.conf
    read_only: true
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./site/public:/usr/share/nginx/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,uid=101,gid=101,size=64m
      - /var/run:rw,noexec,nosuid,size=8m
      - /var/log/nginx:rw,noexec,nosuid,uid=101,gid=101,size=8m
    healthcheck:
      test: ["CMD-SHELL", "pidof nginx >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      hugo:
        condition: service_completed_successfully
    networks:
      - web_pub

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: chaco_cloudflared
    restart: unless-stopped
    command: ["tunnel", "--no-autoupdate", "run", "--token", "${TUNNEL_TOKEN}"]
    env_file:
      - .env
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    # Cloudflared writes ephemeral state; back it with tmpfs
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=16m
      - /home/nonroot:rw,noexec,nosuid,size=32m,mode=700
      - /var/lib/cloudflared:rw,noexec,nosuid,size=32m,mode=700
    depends_on:
      - web
    networks:
      - web_pub

  # Optional one-shot build service (run only when building content)
  hugo:
    image: klakegg/hugo:ext-alpine
    working_dir: /src
    entrypoint: ["/bin/sh","-lc"]
    command: "hugo mod get && hugo --minify"
    volumes:
      - ./site:/src
    # Run with your UID/GID to avoid root-owned files
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      - HUGO_ENV=production
    # Hugo needs writable temp/cache during build; keep volume /src writable
    # If you want extra hardening, add tmpfs mounts instead of read-only rootfs
    # tmpfs:
    #   - /tmp:rw,noexec,nosuid,size=64m
    networks:
      - web_pub

networks:
  web_pub:
    driver: bridge
